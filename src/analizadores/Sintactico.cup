package analizadores; 
import java_cup.runtime.*;
import proyectocupjlex.*;

parser code 
{:
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

    public void Imprimir(String impresion)
    {
        Principal.Imprimir(impresion);
    }
:} 

terminal String PTCOMA,PARIZQ,PARDER,CORIZQ,CORDER, COMA;
terminal String MAS,MENOS,POR,DIVIDIDO;
terminal String MAX,MIN,EQUAL, SI;
terminal String ENTERO;
terminal String PALABRA;
terminal String DECIMAL;
terminal String UMENOS;
terminal String REVALUAR;
terminal String ESCRIBIR;
terminal String CICLO;


non terminal ini;
non terminal instrucciones;
non terminal instruccion;

non terminal condicion;
non terminal valor;
non terminal ciclar;


non terminal Double expresion;

precedence left  MAS, MENOS;        // 3*
precedence left  POR, DIVIDIDO;     // 2*
precedence right UMENOS;            // 1*

start with ini; 

// Evaluar[1+1];
// Evaluar[2];

// instrucciones = instruccion
// Evaluar *
// [ *
// 1 *
// + *
// 1 *
// ] *
// ; *

// Evaluar *
// [ *
// 2 *
// ] *
// ; *

// analisis sintactico exitoso!

ini::=instrucciones ;

instrucciones ::= 
   instruccion instrucciones
 | instruccion
 | condicion
| condicion instrucciones
  | ciclar
| ciclar instrucciones

 | error instrucciones
 
; 


valor ::= 
     instruccion
 |   ESCRIBIR PARIZQ PALABRA:a PARDER {: RESULT=a; :}
 |   REVALUAR CORIZQ expresion:a CORDER {: RESULT=a; :}

;

instruccion ::= 
   REVALUAR CORIZQ expresion:a CORDER PTCOMA{: Imprimir("El valor de la expresión es: " + a); :}
;


expresion  ::= 
    MENOS expresion:a                      {: RESULT=a*-1;              :}%prec UMENOS     
 |  expresion:a MAS        expresion:b     {: RESULT=a+b;               :}
 |  expresion:a MENOS      expresion:b     {: RESULT=a-b;               :}
 |  expresion:a POR        expresion:b     {: RESULT=a*b;               :}
 |  expresion:a DIVIDIDO   expresion:b     {: RESULT=a/b;               :}
 |  ENTERO:a                               {: RESULT=new Double(a);     :}
 |  DECIMAL:a                              {: RESULT=new Double(a);     :}
 |  PARIZQ expresion:a PARDER              {: RESULT=a;                 :}
;

condicion ::= 
    SI PARIZQ ENTERO:a  EQUAL  ENTERO:b COMA valor:x COMA valor:y PARDER PTCOMA {: if (Double.parseDouble(a)==Double.parseDouble(b)){ Imprimir(String.valueOf(x));}else{ Imprimir(String.valueOf(y));} :}    
 |  SI PARIZQ ENTERO:a  MAX  ENTERO:b COMA valor:x COMA valor:y PARDER PTCOMA {: if (Double.parseDouble(a)>Double.parseDouble(b)){ Imprimir(String.valueOf(x));}else{ Imprimir(String.valueOf(y));} :}    
 |  SI PARIZQ ENTERO:a  MIN ENTERO:b COMA valor:x COMA valor:y PARDER PTCOMA {: if (Double.parseDouble(a)<Double.parseDouble(b)){ Imprimir(String.valueOf(x));}else{ Imprimir(String.valueOf(y));} :}    
 |  SI PARIZQ ENTERO:a  MAX EQUAL  ENTERO:b COMA valor:x COMA valor:y PARDER PTCOMA {: if (Double.parseDouble(a)>=Double.parseDouble(b)){ Imprimir(String.valueOf(x));}else{ Imprimir(String.valueOf(y));} :}       
 |  SI PARIZQ ENTERO:a  MIN EQUAL  ENTERO:b COMA valor:x COMA valor:y PARDER PTCOMA {: if (Double.parseDouble(a)<=Double.parseDouble(b)){ Imprimir(String.valueOf(x));}else{ Imprimir(String.valueOf(y));} :}       
 |  SI PARIZQ ENTERO:a  MIN MAX   ENTERO:b COMA valor:x COMA valor:y PARDER PTCOMA {: if (Double.parseDouble(a)!=Double.parseDouble(b)){ Imprimir(String.valueOf(x));}else{ Imprimir(String.valueOf(y));} :}       
;

ciclar ::=
    CICLO PARIZQ ENTERO:a COMA ENTERO:b COMA ENTERO:d PARDER CORIZQ valor:y CORDER {: for(int i=Integer.parseInt(a);i<=Integer.parseInt(b);i=i+Integer.parseInt(d)){
                     Imprimir(String.valueOf(y));
                 }:}

;


